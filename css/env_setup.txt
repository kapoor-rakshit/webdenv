
A CSS file has selectors and declarations
SELECTOR, SELECTOR, SELECTOR {
  DECLARATIONS;
}


#ID_SELECTOR {}                           /* starting with # is ID SELECTOR*/
.CLASS_SELECTOR {}                        /* starting with . is CLASS SELECTOR */


Three ways of including CSS:
1. INLINE CSS          <p style="text-align: center;color: black;"></p>
2. EXTERNAL CSS        <link href="path_to_css_file" rel="stylesheet" type="text/css" />
3. INTERNAL CSS        <style></style>


CSS3 is backward compatible and supported by major web browsers.


LAYOUTS
---------
1. TABLE LAYOUT used for designing layout for page using rowspan, colspan   etc.

2. DIV LAYOUT also used for designing layout for page using float, position, display   etc.

3. MULTI-COLUMN LAYOUT using width, column-width, -webkit-column-count, column-gap, column-rule.
        example: HTML
                 <div class="newspaper">TEXT GOES HERE</div>
                 
                 CSS
                 .newspaper {
                    column-count: 2;
                    column-gap: 40px;
                    column-rule: 1px solid lightblue;
                 }



LAYOUT ENGINE
--------------
used internally by browsers, but sometimes we need to specify explicitly for some declarations
webkit          --> Safari, Chrome        eg: -webkit-column-count
trident         --> IE                    eg: -ms-column-count
gecko           --> FireFox               eg: -moz-column-count


MISC
------
eg: <div>
     <h2>My name is Donald</h2>
     <span>
      <p>I live in Duckburg.</p>
     </span>
   </div>
1. element1 element2   -->  select element2 INSIDE element1                     -->  here <p> is inside <span>, <h2>, <div>
2. element1 > element2  --> select element2 whose PARENT is element1            -->  here <p> parent is only <span>
3. element1 + element2  --> select element2 PLACED IMMEDIATELY AFTER element1 (not inside) -->  here <span> placed immediately after <h2>
4. element1 ~ element2  --> select element2 PRECEDED BY (not necessarily immediately preceded) element1 -->  here <span> preceded by <h2>


SELECTORS
-----------
/* REFERENCE : https://www.w3schools.com/cssref/css_selectors.asp */

tag1, tag2, tag3 {}                          /* tag selectors */
#ID1, #ID2 {}                                /* id selectors */
.CLASS1, .CLASS2 {}                          /* class selectors */
tag1#ID, tag2.CLASS {}                       /* tag with id ID and tag with class CLASS */
tag1[id] {}                                  /* select tag1 elements with the specified attribute (id here) */
[id] {}                                      /* select elements with id attribute */
tag1[id=""] {}                               /* tag1 with attribute id and value equals */
tag1[id^=""] {}                              /* tag1 with attribute id and value starts with */
tag1[class~=""] {}                           /* tag1 with attribute class and value contains as a whole word ie "flower" or "main flower" */
tag1[id|=""] {}                              /* tag1 with attribute id and value here can be single word or value succeded by '-' ie "flower" or "flower-ui" but not "flowerui" */
tag1[id$=""] {}                              /* tag1 with attribute id and value ends with */
tag1[id*=""] {}                              /* tag1 with attribute id and value contains as a substring */
tag1:not(.CLASS) {}                          /* all tag1 except with class CLASS *//* NOTE : donot use "" over selectors (.CLASS here) eg: a:not([target="_blank"])  or  :not([target="_blank"])  */
#ID tag1 {}                                  /* tag1 that is INSIDE of tag with id ID */ /* eg: table tr {} */

/* pseudo classes (:) , REFERENCE : https://www.w3schools.com/css/css_pseudo_classes.asp */
/* Pseudo-class names are not case-sensitive */
/* these can be used without any tag prefix ie applied globally to all tags */
a:link {}                                    /* unvisited link */      /* these must come in order for links to have effect */
a:visited {}                                 /* visited link */
a:hover {}                                   /* mouseover */
a:active {}                                  /* selected link */
p:empty {}                                   /* Selects every <p> element that has no children (including text nodes) */
div:hover + p {}                             /* p tag immediately followed by div tag when div tag is hovered  */
tag1:nth-child(5) {}                         /* 5th tag1 of each parent , uses 1 based indexing */ /* eg: table tr:nth-child(even) {} */
tag1 > tag2:last-child {}                    /* every last tag2 whose PARENT is tag1 */ /* similarly we have      :first-child {} */
tag1:not(.CLASS) {}                          /* all tag1 except with class CLASS *//* NOTE : donot use "" over selectors (.CLASS here) */
q:lang(pb) { quotes: "~" "~"; }              /* q tag with attrib lang having val "pb"  , eg: <q lang="pb">A quote in a paragraph</q> */
input:checked {}                             /* for radio buttons and checkboxes of <input> , option:checked of <option> in <select> */
input:invalid {}                             /* input fields with values not according to their type attribute */
input[type="text"]:focus {}                  /* input tag with type attrib value as text and are focused */
.tab div:target {}                           /* target element div (eg: div with id ID1 when <a href="#ID1"> clicked) inside class tab */
input:out-of-range                           /* works for input elements with min and/or max attributes! */


/* pseudo elements (::) , REFERENCE : https://www.w3schools.com/css/css_pseudo_elements.asp */
/* Pseudo-element names are not case-sensitive */
/* these can be used without any tag prefix ie applied globally to all tags */
::placeholder {}                   ::-webkit-placeholder {}              /* placeholder CSS */
::file-selector-button {}          ::-webkit-file-upload-button {}       /* choose file button CSS */
p::first-line {}                             /* first line of <p> visible on screen */
p::first-letter {}                           /* first letter of <p> */
p::selection {}                              /* portion of an element selected , properties that can be modified are color, background, cursor, outline. */
p::before {                                  /* Insert content at start of <p> , just like "prepend" in jQuery */
  content: "Read this -";                    /* but it is not child of TAG (p here) , rather it acts as sibling identified by TAG */
  background-color: yellow;
  color: red;
  font-weight: bold;
}
p::after {                                   /* Insert content at end of <p> , just like "append" in jQuery */
  content: " - Remember this";               /* but it is not child of TAG (p here) , rather it acts as sibling identified by TAG */
  background-color: yellow;
  color: red;
  font-weight: bold;
}                                 /* content property can have values "TEXT", url(URL_IMAGE), " "attr(ATTRIBUTE_NAME)" " */
                                  /* REFERENCE : https://www.w3schools.com/cssref/pr_gen_content.asp */
                                  
                                  
/* SASS : Syntactically Awesome Style Sheets */
/* It is a CSS preprocessor tool which makes CSS cross browser compatible. */ /* other tools are LESS , STYLUS */
/* SASS uses .sass or .scss files to compile to .css */
/* Instead of brackets and semicolons, it uses indentation of lines to specify blocks. Files in indented syntax use extension .sass */

/* SCSS : Sassy CSS */
/* every valid CSS3 stylesheet is valid SCSS as well. SCSS files use the extension .scss */



DECLARATIONS
-------------
{
/* The height and width properties do not include padding, borders, or margins */
/* They set the height/width of the area inside the padding, border, and margin of the element */
/* Total element height = height + top padding + bottom padding + top border + bottom border + top margin + bottom margin */
/* Total element width = width + left padding + right padding + left border + right border + left margin + right margin */
height: 100%;                 /* In order for a percentage value to work, the parent's height/width must be determined. */ 
                              /* The only exception is the root element <html>, which can be a percentage */ /* Always define CSS  html, body { height: 100%; width: 100%; } */
                              /* The viewport is area where browser renders site. This is screen minus reserved space of browser.  */
                              /* When the height or width of the browser window is changed, they are scaled accordingly. */
                              /* vw unit : Equal to 1% of the width of the VIEWPORT. eg: 100vw */
                              /* vh unit : Equal to 1% of the height of the VIEWPORT. eg: 100vh */
                                                           
width: 100%;                  /* a block element (such as a <div>, <p>, or <ul>) will, by default expand to fit the width of its containing element (minus any margins it has or padding its parent has) */

height:fit-content;
width:fit-content;

min-height: 50%;              /* If content is smaller than min-height, the min-height will be applied. */ /* If content is larger than min-height, the min-height property has no effect ie width wraps around content */
max-height: 50%;              /* If content is larger than max-height, it will overflow. How the container will handle the overflowing content is defined by overflow CSS property. */ /* If content is smaller than max-height, the max-height property has no effect ie wraps around content */
min-width: 500px;             /* If content is smaller than min-width, the min-width will be applied. */ /* If content is larger than min-width, the min-width property has no effect ie wraps around content */
max-width: 150px;             /* If content is larger than max-width, it will automatically change the height of the element. */ /* If content is smaller than max-width, the max-width property has no effect ie wraps around content */


/* BOX-SIZING */
* {
  box-sizing: border-box;     /*             box-sizing: border-box  , allows us to include padding and border in an element's total width and height */
}                             /* By default, box-sizing: content-box , When we set width/height of element, element often appears bigger than what is set. 
                                 (because element's border and padding are added to the element's specified width/height). */


/* !IMPORTANT property */
/* Order of preference of CSS is INLINE --> INTERNAL --> EXTERNAL */
/* apart from this value written at end overrides previous value , eg: margin: auto; margin: 30%;    margin: 30%   will be applied */
/* When !important keyword is used on specific property/value pair, it will cause that value the most important value for that property, overriding any others. */
/* any !important declaration can override another !important declaration. depending on order of declaration ie first one is given preference */
background-color: #0f0 !important;
padding: 20px 10px 20px 10px !important;                   /* this will make all padding-top, padding-right, padding-bottom, padding-left as !IMPORTANT */


/* CSS Units */
/* There are two types of length units: absolute and relative. */
/* Absolute Lengths : The absolute length units are fixed and a length expressed in any of these will appear as exactly that size. */
cm | mm | in (inches, 1in = 96px = 2.54cm) | px (pixels, 1px = 1/96th of 1in, one device pixel (dot) of display) | pt (points, 1pt = 1/72 of 1in) | pc (picas, 1pc = 12 pt)

/* Relative Lengths : Relative length units specify a length relative to another length property */
em    - Relative to the font-size of element (default is 16px) (height: 0.5em means height is 0.5 times font-size of element or font-size of parent)
rem   - Relative to browsers base font-size  (default is 16px) i.e. defined with CSS selector , html {} or relative to root element.
ex    - Relative to the x-height of the current font (rarely used).
ch    - Relative to the width of the "0" (zero) character.
vw    - Relative to 1% of the width of the viewport.
vh    - Relative to 1% of the height of the viewport.
vmin  - Relative to 1% of viewport's* smaller dimension.	
vmax  - Relative to 1% of viewport's* larger dimension.
%     - Relative to the parent element.


/* pointer-events property defines whether or not an element reacts to pointer events */
/* like mouse/touch events – including CSS hover/active states, click/tap events in Javascript, and whether or not cursor is visible. */
pointer-events: none;


background-image: url(img_tree.gif), url(mountain.jpg);    /* if first image not available use second but only one of these used */
background: url(img_tree.gif), url(mountain.jpg);          /* path to multiple images to be used as background */
background-size: 100% 100%;                                /* size of images (width, height)  */ /* background-size: contain, cover;  for using multiple image background */
background-color: pink;                                    /* bg color */
background-image: -webkit-gradient(linear, left bottom, right top, color-stop(0.25, cyan), color-stop(0.50, yellow));  /* gradient */
background-image: linear-gradient(to top right, rgba(255,0,0,0), rgba(255,0,0,1), rgba(0,255,0,1));                    /* last param of rgba() define opacity */


color: magenta;                                            /* font color */
text-shadow: 3px 8px 3px red;                              /* horizontl width, vertical width, blurred, color */
text-decoration: underline overline wavy red;              /* underline, overline, line-through | solid, wavy, dotted, dashed, double | color */
font-style: italic;
font-weight: bold;
font-family: "Times New Roman", Times, serif;              /* follows fallback mechanism , comma separated */
text-transform: capitalize;                                /* none | capitalize | uppercase | lowercase | initial */
font-size: 25px;                                           /* medium (default) | xx-small | x-small | small | large | x-large | xx-large | smaller | larger | length (px, cm) */
text-align: center;
align-content: center;

line-height: 2;                                            /* normal (default)
                                                              number (multiplied with current font-size to set line height)
                                                              length (fixed line height in px, pt, cm, etc.)
                                                              % (line height in percent of the current font size) */
                                                              
will-change: transform, opacity;                           /* The will-change CSS property hints to browsers how an element is expected to change. 
                                                              Browsers may set up optimizations before an element is actually changed. 
                                                              These optimization can increase responsiveness of page by doing potentially expensive work before they required. 
                                                              Excessive use of will-change will result in excessive memory use and will cause more complex rendering to occur
                                                              This may lead to worse performance than better. */
                                                              
white-space: nowrap;                                       /* The white-space property specifies how white-space inside an element is handled.
                                                              normal (default) - Sequences of whitespace will collapse into single whitespace. Text will wrap when necessary.
                                                              nowrap           - Sequences of whitespace will collapse into single whitespace. Text never wrap to next line. 
                                                                                 The text continues on the same line until a <br> tag is encountered */
                                                              
word-break: break-word;                                    /* The word-break property specifies how words should break when reaching the end of a line.
                                                              normal (default) - Uses default line break rules, overflow may happen.
                                                              break-all        - To prevent overflow, word may be broken at any character 
                                                              break-word       - To prevent overflow, word is broken at only arbitrary points like <space>, <br> or character if word is too long */
                                                              
word-wrap: break-word;                                     /* The word-wrap property allows long words to be able to be broken and wrap onto the next line.
                                                              normal (default) - Break words only at allowed break points
                                                              break-word       - Allows unbreakable words to be broken */                                                         
div.a {
  width: 100px; 
  white-space: nowrap;                                     /* The text-overflow property specifies how overflowed content that is not displayed should be signaled to user. */
  overflow: hidden;                                        /* white-space: nowrap;  overflow: hidden;  properties are required for text-overflow */
  text-overflow: ellipsis;                                 /* clip (default) - The text is clipped and not accessible
}                                                             ellipsis       - Render an ellipsis ("...") to represent the clipped text */
div.a:hover {
  overflow: visible;
}

writing-mode: vertical-lr;                                 /* The writing-mode property specifies whether lines of text are laid out horizontally or vertically. 
                                                              horizontal-tb (default) - Let the content flow horizontally from left to right, vertically from top to bottom 
                                                              vertical-lr             - Let the content flow vertically from top to bottom, horizontally from left to right
                                                              vertical-rl             - Let the content flow vertically from top to bottom, horizontally from right to left */

padding: 25px 50px 75px 100px;                             /* generate space around element's content, inside of any defined borders */
                                                           /* negative values NOT allowed *//* four values : top, right, bottom, left */
                                                           /* REFERENCE : https://www.w3schools.com/css/css_padding.asp */
                                                           
margin: 25px 50px 75px 100px;                              /* create space around elements, outside of any defined borders */
margin: auto;                                              /* negative values allowed *//* four values : top, right, bottom, left */
                                                           /* "auto" will make any block elements (div, p, ul) to centralize if width is set to other than default (100%) */
                                                           /* REFERENCE : https://www.w3schools.com/css/css_margin.asp */
                                                           
left: 50px;                                                /* it is used for positioning and used with position property else it has no effect */
                                                           /* position:absolute; left:20px; located 20px from the left of nearest relatively positioned ancestor (the top being the body tag) and is taken out of the document flow */
                                                           /* position:relative; left:20px; The element still maintains the same space as it would when static positioned */
                                                           /* Like it got up and got someone to save his space while it sat on his neighbors lap Or just mingle around the doc */

border-radius: 25px;                                       /* border radius */
box-shadow: 10px -10px 10px 10px red inset;                /* horizontal width (right (+ve value) | left(-ve value)) */
                                                           /* vertical width  (bottom (+ve value) | top (-ve value)) */
                                                           /* blurred (higher number, more blurred the shadow will be) */
                                                           /* spread (positive value increases size of shadow, negative value decreases  size of shadow) */
                                                           /* color */
                                                           /* inset changes shadow from an outer shadow (outset) to an inner shadow */
box-shadow: 5px 5px blue, 10px 10px red, 15px 15px green;  /* multiple shadows comma (,) separated */

/* The clearfix, is a CSS hack that solves a persistent bug that occurs when two floated elements are stacked next to each other. */
/* When elements are aligned this way, the parent container ends up with a height of 0, and it can easily wreak havoc on a layout */
overflow: auto;                                            /* when content of element is too big to fit in the specified area. (visible | hidden | scroll | auto) */
overflow-x: scroll;                                        /* specifies what to do with the left/right edges of the content. */
overflow-y: scroll;                                        /* specifies what to do with the top/bottom edges of the content. */

/* The overflow:auto clearfix works well as long as you are able to keep control of your margins and padding (else you might see scrollbars) */
/* use modern clearfix hack */
.parentDIV::after {
  content: "";
  clear: both;
  display: table;                                          /* element behaves like <table> element */
}


position: sticky;                                          /* specifies type of positioning method used for element(static (default)| absolute | fixed | relative | sticky) */
                                                           /* relative element is positioned relative to its normal position */
                                                           /* absolute element is positioned according to (nearest positioned ( 'absolute', 'relative' or 'fixed') ancestor (the top being the body tag)) */
                                                           /* fixed element is positioned relative to the browser window */
                                                           /* Static (default) positioned elements are not affected by top, bottom, left, right properties. */

position: absolute;                                        /* z-index only works on positioned elements */
z-index: -1;                                               /* z-index property specifies the stack order of an element. */
                                                           /* An element with greater stack order is always in front of an element with a lower stack order. */

                                       /* REFERENCE : https://www.w3schools.com/css/css_float.asp */
float: left;                           /* float property specifies how an element should float. ( left | right | none(default) ) */
clear: left;                           /* clear the float to left. Means that no floating elements allowed on left side (left | right | both) */

                                       /* REFERENCE : https://www.w3schools.com/cssref/pr_class_display.asp */
display: inline-block;                 /* display behavior (type of rendering box) , inline | block | flex | grid | inline-block | table | none | initial */

/* CSS Grid Layout */
/* An HTML element becomes a grid container when its display property is set to grid or inline-grid. */
/* All direct children of the grid container automatically become grid items. eg: <div class="grid-container"><div class="grid-item">1</div></div> */
.grid-container {
  display: grid;
  grid-template-columns: auto auto auto;     /* number of columns in your grid layout, and define the width of each column */
  grid-template-rows: auto auto;             /* height of each row */
  grid-column-gap: 50px;                     /* gap between columns */
  grid-row-gap: 50px;                        /* gap between rows */
}
.grid-item {
  grid-column-start: 1;                      /* just like colspan in <table> or Merge cells in excel , start at column line number 1 */
  grid-column-end: 3;                        /* end at column line number 3 */ /* NOTE : It is column line number not column number */
  grid-row-start: 1;                         /* similar to colspan but merge row wise , start at row line number 1 */
  grid-row-end: 3;                           /* end at row line number 3 */ /* NOTE : It is row line number not row number */
}


/* CSS Flexbox (Flexible Box) Layout */
/* The Flexible Box Layout Module, makes it easier to design flexible responsive layout structure without using float or positioning. */
/* Parent flex container becomes flexible by setting display property to flex *//* eg: <div class="flex-container"><div class="item">1</div><div>2</div></div> */
.flex-container {
  display: flex;
  flex-direction: row;            /* which direction (main-axis) container wants to stack flex items, column(y-axis) | column-reverse | row(default)(x-axis) | row-reverse */
  flex-wrap: wrap;                /* whether flex items should wrap or not, wrap | nowrap (default) | wrap-reverse */
  flex-flow: row wrap;            /* shorthand property for setting both the flex-direction and flex-wrap properties */
  justify-content: center;        /* align flex items (along main-axis), center | flex-start (default) | flex-end | space-around | space-between */
  align-items: center;            /* align flex items (along cross-axis), stretch (default) | center | flex-start | flex-end | baseline */
  align-content: center;          /* align flex lines (containing items)(along cross-axis), stretch (default) | space-between | space-around | center | flex-start | flex-end */
}
.flex-container > .item {
  background-color: #f1f1f1;
  margin: 10px;
  order: 0;                       /* sequence of items i.e. HTML code and rendered page can have different sequence of items, (default: 0) */
  flex-grow: 0;                   /* how much flex item will expand on main-axis relative to rest of flex items, (default: 0) */
  flex-shrink: 1;                 /* how much flex item will shrink on main-axis relative to rest of flex items, 0 value will not let item shrink, (default: 1) */
  flex-basis: 200px;              /* specifies the initial length of a flex item */
  align-self: flex-end;           /* overrides default alignment of that item set by parent container's 'align-items' property */
  flex: 0 1 200px;                /* shorthand property for the flex-grow, flex-shrink, flex-basis properties */
}


visibility: hidden;
visibility: visible;

opacity: 0.4;


width: calc(100vw - 100px);       /* calc() function performs calculation to be used as property value | operators allowed: +, -, *, / */
}

FONT RULES
-----------
.woff  (web open font format)
.ttf   (true type font)

@font-face{                                                /* Use customised font using Font Rule */
 font-family: myFont;
 src: url('path to font file downloaded ttf or woff file');
}
h1{
 font-family: myFont;                                     /* Apply font rule */
}


MEDIA RULES
------------
/* REFERENCE : https://www.w3schools.com/cssref/css3_pr_mediaquery.asp */

/* These allow to tailor CSS according to media type on which and how webpage viewed.
   Media queries can be used to check:
      width and height of the viewport
      width and height of the device
      orientation (is the tablet/phone in landscape or portrait mode)
*/
     
/* SYNTAX : @media [not|only] mediatype and (mediafeature) [and|or|not] (mediafeature) {   CSS-Code;  } */
          /* The only keyword prevents older browsers that do not support media queries with media features from applying the specified styles. */
          /* if you use not or only, you must also specify a media type */
          /* comma (,) is same as or */
          
/* mediatypes */
/* all	      :    Default. Used for all media type devices
   print      :    Used for printers
   screen     :    Used for computer screens, tablets, smart-phones etc.
   speech     :    Used for screenreaders that "reads" the page out loud
*/

/* mediafeatures */
/* height | width            :     The viewport height | width
   max-height | min-height   :     The maximum | minimum height of the display area, such as a browser window 
   max-width  | min-width    :     The maximum | minimum width of the display area, such as a browser window
   orientation               :     The orientation of the viewport (landscape or portrait mode)
                                   landscape : browser window is wider than its height , vice versa we have portrait
*/

/* 1 */
/* When the browser's width is between 600 and 900px (inclusive) OR above 1100px, change the appearance of DIV. */
@media screen and (max-width: 900px) and (min-width: 600px), (min-width: 1100px) {
  div.example {
    font-size: 50px;
    padding: 50px;
    border: 8px solid black;
    background: yellow;
  }
}



